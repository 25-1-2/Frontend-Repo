package com.capston.presentation.ui

import android.annotation.SuppressLint
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.LinearEasing
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.asPaddingValues
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.navigationBars
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.OutlinedTextField
import androidx.compose.material.TextFieldDefaults
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.ModalBottomSheet
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SheetState
import androidx.compose.material3.Text
import androidx.compose.material3.rememberModalBottomSheetState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.graphics.nativeCanvas
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.capston.presentation.R
import com.capston.presentation.theme.CapstonTheme
import com.capston.presentation.theme.LightGray40
import com.capston.presentation.theme.LightGray3
import com.capston.presentation.theme.LightGray4
import com.capston.presentation.theme.LightGray60
import com.capston.presentation.theme.MainBlue
import com.capston.presentation.theme.MainPurple
import com.capston.presentation.theme.Purple40
import kotlinx.coroutines.launch

val lectures = listOf(
    Pair("1. Ìï®ÏàòÏùò Í∑πÌïúÍ≥º Ïó∞ÏÜç‚ë†","2026 ÌòÑÏö∞ÏßÑÏùò ÏàòÎ∂ÑÍ∞ê - ÏàòÌïôI (Í≥µÌÜµ) ÏïΩ 14Î∂Ñ"),
    Pair("2. Ìï®ÏàòÏùò Í∑πÌïúÍ≥º Ïó∞ÏÜç‚ë†","2026 ÌòÑÏö∞ÏßÑÏùò ÏàòÎ∂ÑÍ∞ê - ÏàòÌïôI (Í≥µÌÜµ) ÏïΩ 14Î∂Ñ"),
    Pair( "3. Ìï®ÏàòÏùò Í∑πÌïúÍ≥º Ïó∞ÏÜç‚ë†","2026 ÌòÑÏö∞ÏßÑÏùò ÏàòÎ∂ÑÍ∞ê - ÏàòÌïôI (Í≥µÌÜµ) ÏïΩ 14Î∂Ñ"),
    Pair( "4. Ìï®ÏàòÏùò Í∑πÌïúÍ≥º Ïó∞ÏÜç‚ë†","2026 ÌòÑÏö∞ÏßÑÏùò ÏàòÎ∂ÑÍ∞ê - ÏàòÌïôI (Í≥µÌÜµ) ÏïΩ 14Î∂Ñ"),
    Pair( "5. Ìï®ÏàòÏùò Í∑πÌïúÍ≥º Ïó∞ÏÜç‚ë†","2026 ÌòÑÏö∞ÏßÑÏùò ÏàòÎ∂ÑÍ∞ê - ÏàòÌïôI (Í≥µÌÜµ) ÏïΩ 14Î∂Ñ"),
    Pair( "6. Ìï®ÏàòÏùò Í∑πÌïúÍ≥º Ïó∞ÏÜç‚ë†","2026 ÌòÑÏö∞ÏßÑÏùò ÏàòÎ∂ÑÍ∞ê - ÏàòÌïôI (Í≥µÌÜµ) ÏïΩ 14Î∂Ñ"),
    Pair( "7. Ìï®ÏàòÏùò Í∑πÌïúÍ≥º Ïó∞ÏÜç‚ë†","2026 ÌòÑÏö∞ÏßÑÏùò ÏàòÎ∂ÑÍ∞ê - ÏàòÌïôI (Í≥µÌÜµ) ÏïΩ 14Î∂Ñ"),
)

@OptIn(ExperimentalMaterial3Api::class)
@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
@Composable
fun HomeScreen() {
    // ModalBottomSheetÏùò boolean ÏÉÅÌÉúÎ•º Í∏∞Ïñµ
    var isBottomSheetVisible by remember { mutableStateOf(false) }
    val scope = rememberCoroutineScope()
    val modalBottomSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)

    Scaffold(
        modifier = Modifier
            .fillMaxSize()
            .offset(y = 66.dp),
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
        ) {

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .border(width = 2.dp, color = LightGray4)
                    .background(LightGray3)
                    .padding(vertical = 16.dp)
            ) {
                Column(
                    modifier = Modifier
                        .padding(start = 20.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically, // ÏÑ∏Î°úÎ°ú Ï†ïÎ†¨
                        horizontalArrangement = Arrangement.SpaceBetween, // Ïñë ÎÅùÏóê Î∞∞Ïπò
                        modifier = Modifier.fillMaxWidth() // RowÎ•º ÏµúÎåÄ ÎÑàÎπÑÎ°ú ÏÑ§Ï†ï
                    ) {
                        Text(
                            text = stringResource(R.string.home_status),
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier
                                .padding(top = 10.dp)
                        )

                        Text(
                            text = stringResource(R.string.home_edit),
                            color = LightGray40, // ÏõêÌïòÎäî ÏÉâÏÉÅÏúºÎ°ú ÏÑ§Ï†ï
                            modifier = Modifier
                                .padding(top = 25.dp, end = 20.dp)
                                .clickable {
                                    // Ìé∏Ïßë Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú ÎèôÏûë
                                    isBottomSheetVisible = true // Ìé∏Ïßë Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú bottom sheet Ïó¥Í∏∞
                                }
                        )
                    }

                    LazyRow(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp)
                    ) {
                        items(3) { index -> // TODO Í∞úÏàò ÎÇòÏ§ëÏóê APIÎ°ú Î∞õÏïÑÏÑú ÏàòÏ†ï
                            CircleGraph("Ï†ÑÏ≤¥")
                            Spacer(modifier = Modifier.width(16.dp)) // Í∑∏ÎûòÌîÑ Í∞ÑÍ≤© Ï∂îÍ∞Ä
                            CircleGraph("ÏàòÎ∂ÑÍ∞ê")
                            Spacer(modifier = Modifier.width(16.dp))
                            CircleGraph("ÎØøÏñ¥Î¥ê")
                        }
                    }
                }
            }

            Spacer(modifier = Modifier.height(30.dp)) // üåü Í∑∏ÎûòÌîÑÏôÄ Í∞ïÏùò Î™©Î°ù ÏÇ¨Ïù¥ Í∞ÑÍ≤© Ï∂îÍ∞Ä

            Text(
                text = "‚≠ê Ïò§ÎäòÏùò Í∞ïÏùò (Ï¥ù ${lectures.size}Í∞ï, ÏïΩ 42Î∂Ñ)",
                style = MaterialTheme.typography.bodyLarge,
                fontWeight = FontWeight.Bold,
                fontSize = 20.sp,
                modifier = Modifier.padding(start = 20.dp)
            )
            Spacer(modifier = Modifier.height(20.dp))

            LessonList(330)
        }
    }

    // Î∞îÌÖÄ ÏãúÌä∏
    if (isBottomSheetVisible) {
        ModalBottomSheet(
            sheetState = modalBottomSheetState,
            onDismissRequest = { isBottomSheetVisible = false }
        ) {
            CustomBottomSheetDialog(
                title = "Í∞ïÏùò Î™©Î°ù",
                description = "ÏàòÍ∞ï Ï§ëÏù∏ Í∞ïÏùòÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.",
                modalBottomSheetState = modalBottomSheetState,
                onDismiss = { isBottomSheetVisible = false }
            )
        }
    }

}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CustomBottomSheetDialog(
    title: String,
    description: String,
    modalBottomSheetState: SheetState,
    onDismiss: () -> Unit
) {
    val scope = rememberCoroutineScope()
    val bottomPadding = WindowInsets.navigationBars.asPaddingValues().calculateBottomPadding()

    Column(
        modifier = Modifier
            .padding(top = 10.dp, start = 10.dp, end = 10.dp, bottom = bottomPadding)
            .fillMaxWidth()
            .height(300.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = title,
            textAlign = TextAlign.Start,
            style = TextStyle(
                color = Color.Black,
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold
            )
        )
        Spacer(modifier = Modifier.height(10.dp))

        Text(
            text = description,
            textAlign = TextAlign.Center,
            style = TextStyle(
                color = Color.Gray,
                fontSize = 14.sp,
                fontWeight = FontWeight.Normal
            )
        )

        Spacer(modifier = Modifier.height(10.dp))

        Column(
            modifier = Modifier
                .fillMaxWidth()
                .height(180.dp)
                .padding(10.dp)
                .verticalScroll(rememberScrollState()),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // modalBottomSheetStateÎ•º LectureListÏóê Ï†ÑÎã¨
            LectureList(modalBottomSheetState)
        }

        Spacer(modifier = Modifier.height(10.dp))

        Button(
            onClick = {
                scope.launch {
                    modalBottomSheetState.hide()
                }.invokeOnCompletion {
                    onDismiss()
                }
            },
            colors = ButtonDefaults.buttonColors(
                containerColor = Purple40,
                contentColor = Color.White,
                disabledContainerColor = Purple40,
                disabledContentColor = Color.White,
            ),
        ) {
            Text("ÏàòÏ†ï ÏôÑÎ£å")
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LectureList(modalBottomSheetState: SheetState) {
    // Í∞ïÏùò Î¶¨Ïä§Ìä∏ Îç∞Ïù¥ÌÑ∞
    val lectures = remember {
        mutableStateListOf(
            Pair("2026 ÌòÑÏö∞ÏßÑÏùò ÏàòÎ∂ÑÍ∞ê - ÏàòÌïôI (Í≥µÌÜµ)", "2026 ÌòÑÏö∞ÏßÑ"),
            Pair("2026 ÌòÑÏö∞ÏßÑÏùò ÏàòÎ∂ÑÍ∞ê - ÏàòÌïôII (Í≥µÌÜµ)", "2026 ÌòÑÏö∞ÏßÑ"),
            Pair("2026 ÌòÑÏö∞ÏßÑÏùò ÏàòÎ∂ÑÍ∞ê - ÏàòÌïôIII (Í≥µÌÜµ)", "2026 ÌòÑÏö∞ÏßÑ"),
        )
    }

    // Í∞ïÏùò Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÉÅÌÉú Í¥ÄÎ¶¨
    val checkedStates = remember { mutableStateListOf<Boolean>(false, false, false) }

    Column {
        lectures.forEachIndexed { index, lecture ->
            var lectureTitle by remember { mutableStateOf(lecture.second) } // Í∞ïÏùò Ï†úÎ™©ÏùÑ ÏàòÏ†ïÌï† Î≥ÄÏàò
            var isEditing by remember { mutableStateOf(false) } // ÏàòÏ†ï Î™®Îìú Ïó¨Î∂Ä

            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.padding(vertical = 8.dp)
            ) {
                CheckBox()

                // ÏàòÏ†ï Î™®ÎìúÏùº Îïå TextField Î≥¥Ïó¨Ï£ºÍ∏∞
                if (isEditing) {
                    OutlinedTextField(
                        value = lectureTitle,
                        onValueChange = { lectureTitle = it },
                        label = { Text("Í∞ïÏùò Î≥ÑÏπ≠") },
                        modifier = Modifier.weight(1f),
                        colors = TextFieldDefaults.outlinedTextFieldColors(
                            focusedBorderColor = Color.Red, // Ìè¨Ïª§Ïä§ ÎêòÏóàÏùÑ Îïå ÌÖåÎëêÎ¶¨ ÏÉâÏÉÅ
                            unfocusedBorderColor = MainBlue // Í∏∞Î≥∏(Ìè¨Ïª§Ïä§ Ïïà Îêú) ÏÉÅÌÉúÏùò ÌÖåÎëêÎ¶¨ ÏÉâÏÉÅ
                        )
                    )

                    Button(
                        onClick = {
                            // ÌôïÏù∏ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú ÏàòÏ†ïÎêú ÎÇ¥Ïö© Ï†ÅÏö©
                            lectures[index] = lectures[index].first to lectureTitle
                            isEditing = false  // ÏàòÏ†ï Î™®Îìú Ï¢ÖÎ£å
                        },
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Purple40,
                            contentColor = Color.White,
                        ),
                        modifier = Modifier.padding(start = 16.dp)
                    ) {
                        Text("ÌôïÏù∏")
                    }
                } else {
                    // ÏàòÏ†ï Î™®ÎìúÍ∞Ä ÏïÑÎãê ÎïåÎäî Í∏∞Ï°¥ Í∞ïÏùò Ï†úÎ™©ÏùÑ Í∑∏ÎåÄÎ°ú ÌëúÏãú
                    Column(modifier = Modifier.weight(1f)) {
                        Text(text = lectureTitle, style = MaterialTheme.typography.bodyLarge)
                        Text(
                            text = lecture.first,
                            style = MaterialTheme.typography.bodyMedium,
                            color = LightGray60
                        )
                    }

                    // ÏàòÏ†ï Î≤ÑÌäº
                    IconButton(
                        onClick = {
                            isEditing = true // ÏàòÏ†ï Î™®ÎìúÎ°ú Ï†ÑÌôò
                        },
                        modifier = Modifier.padding(start = 16.dp)
                    ) {
                        Image(
                            painter = painterResource(id = R.drawable.home_screen_edit_iv),
                            contentDescription = "Edit Mode"
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun CheckBox() {
    var imageState by remember { mutableStateOf(true) }

    IconButton(
        onClick = {
            imageState = !imageState
        },
        modifier = Modifier
            .size(40.dp) // Ïù¥ÎØ∏ÏßÄ Î≤ÑÌäº ÌÅ¨Í∏∞ ÏÑ§Ï†ï
            .padding(end = 16.dp) // Ïù¥ÎØ∏ÏßÄÏôÄ ÌÖçÏä§Ìä∏ Í∞ÑÏùò Í∞ÑÍ≤© ÏÑ§Ï†ï
    ) {
        // ÏÉÅÌÉúÏóê Îî∞Îùº Ïù¥ÎØ∏ÏßÄ Î≥ÄÍ≤Ω
        val imageRes = if (imageState) {
            R.drawable.home_screen_check_off // Í∏∞Î≥∏ Ïù¥ÎØ∏ÏßÄ
        } else {
            R.drawable.home_screen_check_on // ÌÅ¥Î¶≠Îêú Ïù¥ÎØ∏ÏßÄ
        }

        Image(
            painter = painterResource(id = imageRes), // ÏÉÅÌÉúÏóê Îî∞Î•∏ Ïù¥ÎØ∏ÏßÄ Î¶¨ÏÜåÏä§ ÏÑ§Ï†ï
            contentDescription = "Lecture Icon"
        )
    }
}

@Composable
fun LessonList(maxHeight: Int) {
    LazyColumn(
        modifier = Modifier.padding(start = 30.dp).heightIn(max = maxHeight.dp) // ÏµúÎåÄ ÎÜíÏù¥Î•º ÏÑ§Ï†ïÌïòÏó¨ Ïä§ÌÅ¨Î°§ Î≤îÏúÑÎ•º Ï†úÌïú
    ) {

        // Í∞ïÏùòÍ∞Ä ÏóÜÏùÑ Í≤ΩÏö∞
        if (lectures.isEmpty()) {
            item {
                Spacer(modifier = Modifier.height(30.dp))
                Text("Ïò§Îäò Í∞ïÏùòÍ∞Ä ÏóÜÏñ¥Ïöî \uD83D\uDE0A\n" +
                        "Ìëπ Ïâ¨Í≥† ÎÇ¥Ïùº Îã§Ïãú Îã¨Î†§Î≥¥ÏïÑÏöî \uD83C\uDFC3")
            }
        } else {
            // Í∞ïÏùòÍ∞Ä ÏûàÏùÑ Í≤ΩÏö∞
            items(lectures) { lecture ->
                Row(
                    verticalAlignment = Alignment.CenterVertically, // ÏÑ∏Î°úÎ°ú Ï§ëÏïô Ï†ïÎ†¨
                    modifier = Modifier.fillMaxWidth().padding(vertical = 10.dp)
                ) {

                    CheckBox()
                    Column {
                        Text(lecture.first, style = MaterialTheme.typography.bodyLarge)
                        Text(
                            text = lecture.second,
                            style = MaterialTheme.typography.bodyLarge,
                            color = LightGray60
                        )
                    }
                }
                Spacer(modifier = Modifier.height(20.dp))
            }
        }
    }
}

@Composable
fun CircleGraph(name: String) {
    val animatedValue = remember { Animatable(0f) }

    // ÌäπÏ†ï Í∞íÏúºÎ°ú ÏÉâÏùÑ Ï±ÑÏö∞Îäî Animation
    LaunchedEffect(Unit) {
        animatedValue.animateTo(
            targetValue = 100F,
            animationSpec = tween(durationMillis = 1000, easing = LinearEasing),
        )
    }

    Canvas(
        modifier = Modifier.size(150.dp)
    ) {
        val sizeArc = size / 1.3F
        drawArc(
            color = Color(0xFFE1E2E9),
            startAngle = 0f,
            sweepAngle = 360f,
            useCenter = true,
            topLeft = Offset((size.width - sizeArc.width) / 2f, (size.height - sizeArc.height) / 2f),
            size = sizeArc,
            style = Stroke(width = 30f)
        )

        drawArc(
            brush = Brush.linearGradient(
                colors = listOf(
                    MainPurple, MainPurple
                ),
                start = Offset.Zero,
                end = Offset.Infinite,
            ),
            startAngle = 270f,
            sweepAngle = animatedValue.value,
            useCenter = false,
            topLeft = Offset(
                (size.width - sizeArc.width) / 2f,
                (size.height - sizeArc.height) / 2f
            ),
            size = sizeArc,
            style = Stroke(width = 30f, cap = StrokeCap.Round)
        )

        drawContext.canvas.nativeCanvas.drawText(
            name,  // ÌÖçÏä§Ìä∏ ÎÇ¥Ïö©
            size.width / 2,  // X ÏúÑÏπò
            size.height / 2,  // Y ÏúÑÏπò
            android.graphics.Paint().apply {
                color = android.graphics.Color.BLACK  // ÌÖçÏä§Ìä∏ ÏÉâ
                textAlign = android.graphics.Paint.Align.CENTER  // ÌÖçÏä§Ìä∏ Ï§ëÏïô Ï†ïÎ†¨
                textSize = 50f  // ÌÖçÏä§Ìä∏ ÌÅ¨Í∏∞
            }
        )

        drawContext.canvas.nativeCanvas.drawText(
            "1/50",  // ÌÖçÏä§Ìä∏ ÎÇ¥Ïö©
            size.width / 2,  // X ÏúÑÏπò
            size.height / 2 + 70,  // Y ÏúÑÏπò
            android.graphics.Paint().apply {
                color = android.graphics.Color.BLACK  // ÌÖçÏä§Ìä∏ ÏÉâ
                textAlign = android.graphics.Paint.Align.CENTER  // ÌÖçÏä§Ìä∏ Ï§ëÏïô Ï†ïÎ†¨
                textSize = 50f  // ÌÖçÏä§Ìä∏ ÌÅ¨Í∏∞
            }
        )
    }
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    CapstonTheme {
        HomeScreen()
    }
}